generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model Game {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code    String   @unique
  stage   String   @default("lobby")
  players Player[]
  rounds  Round[]

  @@map("games")
}

model Player {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  score     Int     @default(0)
  isHost    Boolean @default(false)
  gameId    String? @db.Uuid
  game      Game?   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  rounds    Round[] // Rondas en las que este jugador es el narrador
  playerHand Hand?  // Relaci√≥n 1:1 con Hand

  @@map("players")
}

model Round {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  number     Int
  clue       String?
  status     String  @default("pending")
  gameId     String? @db.Uuid
  narratorId String? @db.Uuid
  narrator   Player? @relation(fields: [narratorId], references: [id])
  game       Game?   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("rounds")
}

model Card {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url   String
  hands Hand[] @relation("CardsOnHands")

  @@map("cards")
}

model Hand {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId String @unique @db.Uuid
  cards    Card[] @relation("CardsOnHands")

  @@map("hands")
} 